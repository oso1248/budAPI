"""00010_bridge_commodity_table

Revision ID: 888f7041d667
Revises: 69f53bc8edbd
Create Date: 2022-02-03 08:22:02.929515

"""
from alembic import op
import sqlalchemy as sa

from sqlalchemy.orm import sessionmaker
Session = sessionmaker()


# revision identifiers, used by Alembic.
revision = '888f7041d667'
down_revision = '69f53bc8edbd'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bridge_commodities',
                    sa.Column('id_commodity', sa.Integer(), nullable=False),
                    sa.Column('id_brand_brewing',
                              sa.Integer(), nullable=False),
                    sa.Column('id_brewhouse', sa.Integer(), nullable=False),
                    sa.Column('amount_per_brew', sa.Numeric(
                        precision=9, scale=2), nullable=False),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.Column('updated_by', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['created_by'], ['users.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['id_brand_brewing'], ['brand_brewing.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['id_commodity'], ['commodities.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['updated_by'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id_commodity', 'id_brand_brewing', 'id_brewhouse')
                    )
    bind = op.get_bind()
    session = Session(bind=bind)
    session.execute("""
        CREATE TRIGGER update_timestamp
        BEFORE UPDATE
        ON bridge_commodities 
        FOR EACH ROW
        EXECUTE PROCEDURE update_timestamp();
    """)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bridge_commodities')
    # ### end Alembic commands ###
