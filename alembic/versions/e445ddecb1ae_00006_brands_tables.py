"""00006_brands_tables

Revision ID: e445ddecb1ae
Revises: 4e2afed6d187
Create Date: 2022-01-22 17:43:57.735523

"""
from alembic import op
import sqlalchemy as sa

from sqlalchemy.orm import sessionmaker
from api.config import settings
Session = sessionmaker()


# revision identifiers, used by Alembic.
revision = 'e445ddecb1ae'
down_revision = '4e2afed6d187'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('brand_brewing',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('is_organic', sa.Boolean(), nullable=False),
                    sa.Column('is_hop_kettle', sa.Boolean(), nullable=False),
                    sa.Column('is_hop_dry', sa.Boolean(), nullable=False),
                    sa.Column('is_addition', sa.Boolean(), nullable=False),
                    sa.Column('note', sa.String(), nullable=True),
                    sa.Column('methods_acx', sa.String(), nullable=True),
                    sa.Column('methods_csx', sa.String(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.Column('updated_by', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['created_by'], ['users.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['updated_by'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('methods_brewing',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('method', sa.String(), nullable=False),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.Column('updated_by', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['created_by'], ['users.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['updated_by'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('method')
                    )
    op.create_table('methods_finishing',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('method', sa.String(), nullable=False),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.Column('updated_by', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['created_by'], ['users.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['updated_by'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('method')
                    )
    op.create_table('brand_finishing',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('is_pre_injection',
                              sa.Boolean(), nullable=False),
                    sa.Column('is_post_injection',
                              sa.Boolean(), nullable=False),
                    sa.Column('is_bypass', sa.Boolean(), nullable=False),
                    sa.Column('is_organic', sa.Boolean(), nullable=False),
                    sa.Column('note', sa.String(), nullable=True),
                    sa.Column('methods_filters', sa.String(), nullable=True),
                    sa.Column('methods_releasing', sa.String(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('id_brewing', sa.Integer(), nullable=False),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.Column('updated_by', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['created_by'], ['users.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['id_brewing'], ['brand_brewing.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['updated_by'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('brand_packaging',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('is_organic', sa.Boolean(), nullable=False),
                    sa.Column('note', sa.String(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('id_finishing', sa.Integer(), nullable=False),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.Column('updated_by', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['created_by'], ['users.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['id_finishing'], ['brand_finishing.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['updated_by'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    bind = op.get_bind()
    session = Session(bind=bind)
    session.execute("""
        CREATE TRIGGER update_timestamp
        BEFORE UPDATE
        ON brand_brewing 
        FOR EACH ROW
        EXECUTE PROCEDURE update_timestamp();
    """)
    session.execute("""
        CREATE TRIGGER update_timestamp
        BEFORE UPDATE
        ON methods_brewing 
        FOR EACH ROW
        EXECUTE PROCEDURE update_timestamp();
    """)
    session.execute("""
        CREATE TRIGGER update_timestamp
        BEFORE UPDATE
        ON methods_finishing 
        FOR EACH ROW
        EXECUTE PROCEDURE update_timestamp();
    """)
    session.execute("""
        CREATE TRIGGER update_timestamp
        BEFORE UPDATE
        ON brand_finishing 
        FOR EACH ROW
        EXECUTE PROCEDURE update_timestamp();
    """)
    session.execute("""
        CREATE TRIGGER update_timestamp
        BEFORE UPDATE
        ON brand_packaging 
        FOR EACH ROW
        EXECUTE PROCEDURE update_timestamp();
    """)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('brand_packaging')
    op.drop_table('brand_finishing')
    op.drop_table('methods_finishing')
    op.drop_table('methods_brewing')
    op.drop_table('brand_brewing')
    # ### end Alembic commands ###
