"""00002_users_tables

Revision ID: ed5fe6a85a06
Revises: 3c7292846481
Create Date: 2022-01-21 19:45:28.909452

"""
from alembic import op
import sqlalchemy as sa

from api.config import settings
from sqlalchemy.orm import sessionmaker
from api.config import settings
Session = sessionmaker()

# revision identifiers, used by Alembic.
revision = 'ed5fe6a85a06'
down_revision = '3c7292846481'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('username', sa.String(), nullable=False),
                    sa.Column('role', sa.String(), nullable=False),
                    sa.Column('brewery', sa.String(), nullable=False),
                    sa.Column('permissions', sa.Integer(), nullable=False),
                    sa.Column('password', sa.String(), nullable=False),
                    sa.Column('is_active', sa.Boolean(),
                              server_default='TRUE', nullable=False),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.Column('updated_by', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['created_by'], ['users.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['updated_by'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name'),
                    sa.UniqueConstraint('username')
                    )
    bind = op.get_bind()
    session = Session(bind=bind)
    session.execute(settings.USER_INSERT)
    session.execute("""
        CREATE TRIGGER update_timestamp
        BEFORE UPDATE
        ON users 
        FOR EACH ROW
        EXECUTE PROCEDURE update_timestamp();
    """)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    # ### end Alembic commands ###
